#!/usr/bin/env python3
"""
Test du syst√®me am√©lior√© avec :
- Filtrage des offres r√©centes (< 7 jours)
- Description du poste dans chaque dossier
- Email r√©capitulatif
"""

import logging
from datetime import datetime, timedelta
from config_manager import ConfigManager
from nlp.matcher import JobMatcher
from nlp.generator import LetterGenerator
from candidature_manager import CandidatureManager
from notification_manager import NotificationManager

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_recent_jobs():
    """Cr√©e des offres d'emploi r√©centes (moins de 7 jours)"""
    today = datetime.now()
    
    recent_jobs = [
        {
            'id': 'linkedin_001',
            'titre': 'D√©veloppeur Full Stack React/Node.js H/F',
            'entreprise': 'Capgemini',
            'localisation': 'Paris, √éle-de-France',
            'description': 'Capgemini recherche un d√©veloppeur Full Stack pour rejoindre son √©quipe Digital. Vous travaillerez sur des projets innovants pour des clients internationaux. Comp√©tences requises : React, Node.js, bases de donn√©es relationnelles, m√©thodologies agiles.',
            'type_contrat': 'CDI',
            'salaire': '45000‚Ç¨ - 55000‚Ç¨',
            'url': 'https://www.linkedin.com/jobs/view/123456789',
            'date_publication': (today - timedelta(days=2)).strftime('%Y-%m-%d'),
            'source': 'linkedin',
            'remote': True,
            'experience': 'mid-senior'
        },
        {
            'id': 'linkedin_002',
            'titre': 'Ing√©nieur D√©veloppement PHP/Symfony',
            'entreprise': 'Orange',
            'localisation': 'Ch√¢tillon, √éle-de-France',
            'description': 'Orange recherche un ing√©nieur d√©veloppement PHP/Symfony pour ses services num√©riques. Vous participerez au d√©veloppement d\'applications critiques, √† l\'architecture des syst√®mes et √† l\'optimisation des performances.',
            'type_contrat': 'CDI',
            'salaire': '50000‚Ç¨ - 60000‚Ç¨',
            'url': 'https://www.linkedin.com/jobs/view/987654321',
            'date_publication': (today - timedelta(days=1)).strftime('%Y-%m-%d'),
            'source': 'linkedin',
            'remote': False,
            'experience': 'senior'
        },
        {
            'id': 'indeed_001',
            'titre': 'D√©veloppeur Frontend React Senior',
            'entreprise': 'BlaBlaCar',
            'localisation': 'Paris, √éle-de-France',
            'description': 'BlaBlaCar recherche un d√©veloppeur Frontend React Senior pour am√©liorer l\'exp√©rience utilisateur de sa plateforme. Vous travaillerez sur des fonctionnalit√©s innovantes et contribuerez √† l\'architecture frontend.',
            'type_contrat': 'CDI',
            'salaire': '55000‚Ç¨ - 65000‚Ç¨',
            'url': 'https://fr.indeed.com/viewjob?jk=abcdef123',
            'date_publication': today.strftime('%Y-%m-%d'),
            'source': 'indeed',
            'remote': True,
            'experience': 'senior'
        },
        {
            'id': 'linkedin_003',
            'titre': 'D√©veloppeur Backend PHP/Symfony',
            'entreprise': 'Doctolib',
            'localisation': 'Paris, √éle-de-France',
            'description': 'Doctolib recherche un d√©veloppeur Backend PHP/Symfony pour d√©velopper ses services de sant√© num√©rique. Vous travaillerez sur des APIs robustes, la s√©curit√© des donn√©es et l\'optimisation des performances.',
            'type_contrat': 'CDI',
            'salaire': '48000‚Ç¨ - 58000‚Ç¨',
            'url': 'https://www.linkedin.com/jobs/view/456789123',
            'date_publication': (today - timedelta(days=3)).strftime('%Y-%m-%d'),
            'source': 'linkedin',
            'remote': True,
            'experience': 'mid-senior'
        },
        {
            'id': 'linkedin_004',
            'titre': 'D√©veloppeur Full Stack Senior',
            'entreprise': 'Air France',
            'localisation': 'Paris, √éle-de-France',
            'description': 'Air France recherche un d√©veloppeur Full Stack Senior pour moderniser ses syst√®mes de r√©servation. Technologies : React, Node.js, microservices, cloud AWS.',
            'type_contrat': 'CDI',
            'salaire': '52000‚Ç¨ - 62000‚Ç¨',
            'url': 'https://www.linkedin.com/jobs/view/789123456',
            'date_publication': (today - timedelta(days=5)).strftime('%Y-%m-%d'),
            'source': 'linkedin',
            'remote': True,
            'experience': 'senior'
        }
    ]
    
    return recent_jobs

def test_improved_system():
    """Test du syst√®me am√©lior√©"""
    logger.info("üöÄ Test du syst√®me am√©lior√© de candidature")
    
    try:
        # 1. Chargement de la configuration
        config = ConfigManager()
        logger.info("‚úÖ Configuration charg√©e")
        
        # 2. Cr√©ation des offres r√©centes
        recent_jobs = create_recent_jobs()
        logger.info(f"‚úÖ {len(recent_jobs)} offres r√©centes cr√©√©es")
        
        # Affichage des dates
        logger.info("\nüìÖ Dates des offres cr√©√©es:")
        for job in recent_jobs:
            days_ago = (datetime.now() - datetime.strptime(job['date_publication'], '%Y-%m-%d')).days
            logger.info(f"   {job['entreprise']}: {job['date_publication']} ({days_ago} jour(s) ago)")
        
        # 3. Filtrage des offres (maintenant avec filtrage par date)
        matcher = JobMatcher(config)
        filtered_jobs = matcher.filter_jobs(recent_jobs)
        logger.info(f"\n‚úÖ {len(filtered_jobs)} offres r√©centes correspondent √† vos crit√®res")
        
        # Affichage des offres filtr√©es avec scores
        logger.info("\nüìã Offres filtr√©es par pertinence :")
        for i, job in enumerate(filtered_jobs, 1):
            score = job.get('match_score', 0)
            days_ago = (datetime.now() - datetime.strptime(job['date_publication'], '%Y-%m-%d')).days
            logger.info(f"\n{i}. {job.get('titre')}")
            logger.info(f"   Entreprise: {job.get('entreprise')}")
            logger.info(f"   Localisation: {job.get('localisation')}")
            logger.info(f"   Score: {score:.3f}")
            logger.info(f"   Date: {job['date_publication']} ({days_ago} jour(s) ago)")
            logger.info(f"   Remote: {'Oui' if job.get('remote') else 'Non'}")
        
        if not filtered_jobs:
            logger.warning("‚ö†Ô∏è Aucune offre ne correspond √† vos crit√®res")
            return False
        
        # 4. G√©n√©ration des lettres de motivation
        generator = LetterGenerator(config)
        logger.info("\nüìù G√©n√©ration des lettres de motivation...")
        
        jobs_with_letters = []
        for job in filtered_jobs:
            try:
                letter = generator.generate_letter(job)
                job['lettre_motivation'] = letter
                logger.info(f"‚úÖ Lettre g√©n√©r√©e pour {job.get('entreprise')}")
                jobs_with_letters.append(job)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur g√©n√©ration lettre pour {job.get('entreprise')}: {e}")
        
        if not jobs_with_letters:
            logger.error("‚ùå Aucune lettre n'a pu √™tre g√©n√©r√©e")
            return False
        
        # 5. Pr√©paration des candidatures (maintenant avec description du poste)
        candidature_manager = CandidatureManager(config)
        logger.info("\nüìÅ Pr√©paration des candidatures...")
        
        prepared_candidatures = []
        for job in jobs_with_letters:
            try:
                success = candidature_manager.prepare_application(job)
                if success:
                    logger.info(f"‚úÖ Candidature pr√©par√©e pour {job.get('entreprise')}")
                    prepared_candidatures.append(job)
                else:
                    logger.error(f"‚ùå √âchec pr√©paration pour {job.get('entreprise')}")
            except Exception as e:
                logger.error(f"‚ùå Erreur pr√©paration: {e}")
        
        if not prepared_candidatures:
            logger.error("‚ùå Aucune candidature n'a pu √™tre pr√©par√©e")
            return False
        
        # 6. Test des notifications et envoi de l'email r√©capitulatif
        notification_manager = NotificationManager(config)
        logger.info("\nüìß Test des notifications et envoi de l'email r√©capitulatif...")
        
        notif_status = notification_manager.get_notification_status()
        logger.info(f"‚úÖ Statut notifications: {notif_status}")
        
        # Envoi de l'email r√©capitulatif
        if notif_status['email_configured']:
            logger.info("üìß Envoi de l'email r√©capitulatif...")
            email_sent = notification_manager.send_candidature_recap_email(prepared_candidatures)
            
            if email_sent:
                logger.info("‚úÖ Email r√©capitulatif envoy√© avec succ√®s !")
                logger.info(f"üìß V√©rifiez votre bo√Æte mail: {notif_status.get('email_configured', 'N/A')}")
            else:
                logger.warning("‚ö†Ô∏è √âchec de l'envoi de l'email r√©capitulatif")
        else:
            logger.warning("‚ö†Ô∏è Email non configur√© - impossible d'envoyer le r√©capitulatif")
        
        # 7. V√©rification des dossiers cr√©√©s
        logger.info("\nüìÅ V√©rification des dossiers de candidature...")
        
        import os
        if os.path.exists('outbox'):
            candidatures = [d for d in os.listdir('outbox') if os.path.isdir(os.path.join('outbox', d))]
            candidatures.sort(key=lambda x: os.path.getctime(os.path.join('outbox', x)), reverse=True)
            
            # Afficher les dossiers r√©cents
            recent_candidatures = candidatures[:len(prepared_candidatures)]
            logger.info(f"üìÇ Dossiers de candidature cr√©√©s: {len(recent_candidatures)}")
            
            for candidature in recent_candidatures:
                candidature_path = os.path.join('outbox', candidature)
                files = os.listdir(candidature_path)
                
                logger.info(f"\n   üìÅ {candidature}:")
                for file in files:
                    file_path = os.path.join(candidature_path, file)
                    file_size = os.path.getsize(file_path)
                    logger.info(f"      üìÑ {file} ({file_size} bytes)")
        
        # 8. R√©sum√© final
        logger.info("\n" + "="*70)
        logger.info("üéâ TEST DU SYST√àME AM√âLIOR√â TERMIN√â AVEC SUCC√àS !")
        logger.info("="*70)
        logger.info(f"üìä Offres r√©centes cr√©√©es: {len(recent_jobs)}")
        logger.info(f"‚úÖ Offres filtr√©es (< 7 jours): {len(filtered_jobs)}")
        logger.info(f"üéØ Candidatures pr√©par√©es: {len(prepared_candidatures)}")
        logger.info(f"üìù Lettres g√©n√©r√©es: {len(jobs_with_letters)}")
        logger.info(f"üìÅ Dossiers cr√©√©s dans: ./outbox/")
        logger.info(f"üìß Email r√©capitulatif: {'Envoy√©' if notif_status['email_configured'] else 'Non configur√©'}")
        
        logger.info("\nüí° Am√©liorations test√©es:")
        logger.info("   ‚úÖ Filtrage des offres r√©centes (< 7 jours)")
        logger.info("   ‚úÖ Description du poste dans chaque dossier")
        logger.info("   ‚úÖ Email r√©capitulatif HTML avec toutes les candidatures")
        logger.info("   ‚úÖ Structure de dossier am√©lior√©e")
        
        logger.info("\nüöÄ Votre bot est maintenant pr√™t pour la production !")
        logger.info("üí° Lancez-le avec: ./start.sh daemon")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {e}")
        return False

def main():
    """Fonction principale"""
    logger.info("üöÄ Test du syst√®me am√©lior√© de candidature")
    logger.info("=" * 60)
    
    success = test_improved_system()
    
    if success:
        logger.info("\nüéâ Test r√©ussi ! Toutes les am√©liorations fonctionnent.")
    else:
        logger.error("\n‚ö†Ô∏è Le test a √©chou√©. V√©rifiez la configuration et les erreurs.")
    
    return success

if __name__ == "__main__":
    main()
