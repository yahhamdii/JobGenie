#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement du bot de candidature
Teste les composants principaux sans effectuer de vraies candidatures
"""

import os
import sys
import logging
from pathlib import Path

# Configuration du logging pour les tests
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_imports():
    """Teste l'importation de tous les modules"""
    logger.info("=== Test des imports ===")
    
    try:
        from config_manager import ConfigManager
        logger.info("‚úÖ ConfigManager import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import ConfigManager: {e}")
        return False
    
    try:
        from sources.france_travail import FranceTravailSource
        logger.info("‚úÖ FranceTravailSource import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import FranceTravailSource: {e}")
        return False
    
    try:
        from sources.linkedin import LinkedInSource
        logger.info("‚úÖ LinkedInSource import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import LinkedInSource: {e}")
        return False
    
    try:
        from sources.indeed import IndeedSource
        logger.info("‚úÖ IndeedSource import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import IndeedSource: {e}")
        return False
    
    try:
        from nlp.matcher import JobMatcher
        logger.info("‚úÖ JobMatcher import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import JobMatcher: {e}")
        return False
    
    try:
        from nlp.generator import LetterGenerator
        logger.info("‚úÖ LetterGenerator import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import LetterGenerator: {e}")
        return False
    
    try:
        from candidature_manager import CandidatureManager
        logger.info("‚úÖ CandidatureManager import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import CandidatureManager: {e}")
        return False
    
    try:
        from notification_manager import NotificationManager
        logger.info("‚úÖ NotificationManager import√© avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur import NotificationManager: {e}")
        return False
    
    logger.info("‚úÖ Tous les imports r√©ussis")
    return True

def test_configuration():
    """Teste la configuration du bot"""
    logger.info("=== Test de la configuration ===")
    
    try:
        from config_manager import ConfigManager
        
        # Test avec un fichier de config existant
        if not os.path.exists('config.yaml'):
            logger.warning("‚ö†Ô∏è Fichier config.yaml non trouv√©, cr√©ation d'un exemple")
            create_example_config()
        
        config = ConfigManager()
        logger.info("‚úÖ Configuration charg√©e avec succ√®s")
        
        # Test des m√©thodes de configuration
        profile = config.get_profile()
        logger.info(f"‚úÖ Profil r√©cup√©r√©: {profile.get('nom', 'N/A')}")
        
        preferences = config.get_preferences()
        logger.info(f"‚úÖ Pr√©f√©rences r√©cup√©r√©es: {len(preferences)} sections")
        
        sources = config.get_sources()
        logger.info(f"‚úÖ Sources configur√©es: {len(sources)} sources")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de configuration: {e}")
        return False

def create_example_config():
    """Cr√©e un fichier de configuration d'exemple"""
    example_config = """# Configuration d'exemple pour le bot de candidature
profile:
  nom: "Utilisateur Test"
  email: "test@example.com"
  telephone: "+33 6 12 34 56 78"
  linkedin: "https://linkedin.com/in/test"
  cv_path: "./example_cv.pdf"

preferences:
  stack_technique: ["Python", "JavaScript", "React"]
  localisation: ["Paris", "Remote"]
  type_contrat: ["CDI", "Freelance"]
  salaire_min: 40000
  mots_cles: ["d√©veloppeur", "ing√©nieur"]

api_keys:
  france_travail: "VOTRE_TOKEN_API_FRANCE_TRAVAIL"
  openai: "VOTRE_CLE_API_OPENAI"

sources:
  france_travail:
    enabled: false
    url: "https://api.pole-emploi.io/partenaire/offresdemploi/v2/offres/search"
  linkedin:
    enabled: false
    base_url: "https://www.linkedin.com/jobs/search/"
  indeed:
    enabled: false
    base_url: "https://fr.indeed.com/emplois"

generation:
  mode: "semi_auto"
  llm_provider: "openai"
  ollama_model: "llama3"

notifications:
  email: false
  slack: false
  webhook: ""
"""
    
    with open('config.yaml', 'w', encoding='utf-8') as f:
        f.write(example_config)
    
    logger.info("‚úÖ Fichier config.yaml d'exemple cr√©√©")

def test_sources():
    """Teste les sources d'offres d'emploi"""
    logger.info("=== Test des sources ===")
    
    try:
        from config_manager import ConfigManager
        from sources.france_travail import FranceTravailSource
        from sources.linkedin import LinkedInSource
        from sources.indeed import IndeedSource
        
        config = ConfigManager()
        
        # Test France Travail (sans API key)
        if config.is_source_enabled('france_travail'):
            source = FranceTravailSource(config)
            logger.info("‚úÖ Source France Travail initialis√©e")
        else:
            logger.info("‚ÑπÔ∏è Source France Travail d√©sactiv√©e")
        
        # Test LinkedIn
        if config.is_source_enabled('linkedin'):
            source = LinkedInSource(config)
            logger.info("‚úÖ Source LinkedIn initialis√©e")
        else:
            logger.info("‚ÑπÔ∏è Source LinkedIn d√©sactiv√©e")
        
        # Test Indeed
        if config.is_source_enabled('indeed'):
            source = IndeedSource(config)
            logger.info("‚úÖ Source Indeed initialis√©e")
        else:
            logger.info("‚ÑπÔ∏è Source Indeed d√©sactiv√©e")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des sources: {e}")
        return False

def test_nlp_modules():
    """Teste les modules NLP"""
    logger.info("=== Test des modules NLP ===")
    
    try:
        from config_manager import ConfigManager
        from nlp.matcher import JobMatcher
        from nlp.generator import LetterGenerator
        
        config = ConfigManager()
        
        # Test du matcher
        matcher = JobMatcher(config)
        logger.info("‚úÖ JobMatcher initialis√©")
        
        # Test du g√©n√©rateur
        generator = LetterGenerator(config)
        logger.info("‚úÖ LetterGenerator initialis√©")
        
        # Test des statistiques
        stats = generator.get_generation_stats()
        logger.info(f"‚úÖ Statistiques de g√©n√©ration: {stats}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des modules NLP: {e}")
        return False

def test_managers():
    """Teste les gestionnaires"""
    logger.info("=== Test des gestionnaires ===")
    
    try:
        from config_manager import ConfigManager
        from candidature_manager import CandidatureManager
        from notification_manager import NotificationManager
        
        config = ConfigManager()
        
        # Test du gestionnaire de candidatures
        candidature_manager = CandidatureManager(config)
        logger.info("‚úÖ CandidatureManager initialis√©")
        
        # Test du gestionnaire de notifications
        notification_manager = NotificationManager(config)
        logger.info("‚úÖ NotificationManager initialis√©")
        
        # Test du statut des notifications
        notif_status = notification_manager.get_notification_status()
        logger.info(f"‚úÖ Statut des notifications: {notif_status}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des gestionnaires: {e}")
        return False

def test_directories():
    """Teste la cr√©ation des dossiers"""
    logger.info("=== Test de la cr√©ation des dossiers ===")
    
    try:
        directories = ['logs', 'outbox', 'temp', 'cv_letters']
        
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
            logger.info(f"‚úÖ Dossier {directory} cr√©√©/v√©rifi√©")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des dossiers: {e}")
        return False

def run_all_tests():
    """Ex√©cute tous les tests"""
    logger.info("üöÄ D√©marrage des tests du bot de candidature")
    
    tests = [
        ("Imports", test_imports),
        ("Configuration", test_configuration),
        ("Sources", test_sources),
        ("Modules NLP", test_nlp_modules),
        ("Gestionnaires", test_managers),
        ("Dossiers", test_directories)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå Test {test_name} a √©chou√© avec une exception: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    logger.info("\n" + "="*50)
    logger.info("üìä R√âSUM√â DES TESTS")
    logger.info("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        logger.info("üéâ Tous les tests sont pass√©s ! Le bot est pr√™t √† fonctionner.")
        return True
    else:
        logger.error(f"‚ö†Ô∏è {total - passed} test(s) ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
