name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    name: Run tests (Python + Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system deps for Playwright
        run: |
          sudo npx --yes playwright install-deps chromium | cat

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium | cat

      - name: Prepare runtime directories
        run: |
          mkdir -p logs outbox temp cv_letters

      - name: Materialize ENV_FILE secret to .env and env_config.txt
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          if [ -n "$ENV_FILE" ]; then
            echo "$ENV_FILE" > .env
            echo "$ENV_FILE" > env_config.txt
          else
            echo "ENV_FILE secret is empty or not set" >&2
          fi

      - name: Run smoke tests
        run: |
          set -e
          python -V
          # Basic sanity: import modules and run quick tests
          python - <<'PY'
          import sys
          import importlib
          mods = [
            'bot', 'auto_candidature_manager', 'candidature_manager', 'config_manager',
            'sources.base_source', 'sources.linkedin', 'sources.indeed', 'sources.france_travail',
            'nlp.matcher', 'nlp.generator', 'notification_manager'
          ]
          for m in mods:
              importlib.import_module(m)
          print('Imports OK')
          PY

      - name: Run unit tests
        run: |
          set -e
          ls -1 test_*.py | xargs -I {} python {} | cat

  docker:
    name: Build and push Docker image
    needs: tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase repo
        id: repolc
        run: |
          echo repo_lc=ghcr.io/${GITHUB_REPOSITORY,,} >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.repolc.outputs.repo_lc }}
          flavor: |
            latest=true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to server (SSH)
    needs: docker
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Compute lowercase repo
        id: repolc_deploy
        run: |
          echo repo_lc=ghcr.io/${GITHUB_REPOSITORY,,} >> $GITHUB_OUTPUT

      - name: Prepare image name
        id: prep
        run: |
          echo "image=${{ steps.repolc_deploy.outputs.repo_lc }}:latest" >> $GITHUB_OUTPUT

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || '22' }}
          script_stop: true
          command_timeout: 30m
          envs: ENV_FILE,IMAGE,GHCR_USERNAME,GHCR_TOKEN
          script: |
            set -e
            set -x
            # detect docker command
            if command -v docker >/dev/null 2>&1; then
              DOCKER="docker"
            elif command -v sudo >/dev/null 2>&1 && sudo -n docker version >/dev/null 2>&1; then
              DOCKER="sudo docker"
            else
              echo "Docker is not installed or not accessible for this user" >&2
              exit 1
            fi
            $DOCKER version || true
            mkdir -p ~/jobgenie-data/{outbox,logs,cv_letters}
            if [ -n "$ENV_FILE" ]; then
              echo "$ENV_FILE" > ~/jobgenie-data/.env
            fi
            echo "$IMAGE"
            if [ -n "$GHCR_TOKEN" ]; then
              echo "$GHCR_TOKEN" | $DOCKER login ghcr.io -u "$GHCR_USERNAME" --password-stdin || true
            else
              echo "GHCR_TOKEN not set; attempting anonymous pull (works only for public images)"
            fi
            $DOCKER pull "$IMAGE"
            $DOCKER rm -f jobgenie || true
            if [ -f ~/jobgenie-data/.env ]; then
              EF_OPT="--env-file ~/jobgenie-data/.env"
            else
              EF_OPT=""
            fi
            RUN_OPTS="-d --name jobgenie -p 7001:7001 $EF_OPT \
              -v ~/jobgenie-data/outbox:/jobgenie/outbox \
              -v ~/jobgenie-data/logs:/jobgenie/logs \
              -v ~/jobgenie-data/cv_letters:/jobgenie/cv_letters"
            set +e
            if [ -f ~/jobgenie-data/config.yaml ]; then
              RUN_OPTS="$RUN_OPTS -v ~/jobgenie-data/config.yaml:/jobgenie/config.yaml:ro"
            else
              echo "No config.yaml on server; using image default /jobgenie/config.yaml"
            fi
            if [ -f ~/jobgenie-data/CV.pdf ]; then
              RUN_OPTS="$RUN_OPTS -v ~/jobgenie-data/CV.pdf:/jobgenie/cv.pdf:ro"
            else
              echo "No CV.pdf on server; using image default /jobgenie/CV.pdf"
            fi
            set -e
            # shellcheck disable=SC2086
            $DOCKER run $RUN_OPTS "$IMAGE"
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
          IMAGE: ${{ steps.prep.outputs.image }}
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

